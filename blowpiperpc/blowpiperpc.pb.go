// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.3
// source: blowpiperpc.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blowpiperpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_blowpiperpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_blowpiperpc_proto_rawDescGZIP(), []int{0}
}

func (x *User) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type Context struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Context) Reset() {
	*x = Context{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blowpiperpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Context) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Context) ProtoMessage() {}

func (x *Context) ProtoReflect() protoreflect.Message {
	mi := &file_blowpiperpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Context.ProtoReflect.Descriptor instead.
func (*Context) Descriptor() ([]byte, []int) {
	return file_blowpiperpc_proto_rawDescGZIP(), []int{1}
}

func (x *Context) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Context) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Context) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type ListContextsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Regex string `protobuf:"bytes,1,opt,name=regex,proto3" json:"regex,omitempty"`
}

func (x *ListContextsRequest) Reset() {
	*x = ListContextsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blowpiperpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListContextsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContextsRequest) ProtoMessage() {}

func (x *ListContextsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blowpiperpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContextsRequest.ProtoReflect.Descriptor instead.
func (*ListContextsRequest) Descriptor() ([]byte, []int) {
	return file_blowpiperpc_proto_rawDescGZIP(), []int{2}
}

func (x *ListContextsRequest) GetRegex() string {
	if x != nil {
		return x.Regex
	}
	return ""
}

type ListUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Regex string `protobuf:"bytes,1,opt,name=regex,proto3" json:"regex,omitempty"`
}

func (x *ListUsersRequest) Reset() {
	*x = ListUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blowpiperpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUsersRequest) ProtoMessage() {}

func (x *ListUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blowpiperpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUsersRequest.ProtoReflect.Descriptor instead.
func (*ListUsersRequest) Descriptor() ([]byte, []int) {
	return file_blowpiperpc_proto_rawDescGZIP(), []int{3}
}

func (x *ListUsersRequest) GetRegex() string {
	if x != nil {
		return x.Regex
	}
	return ""
}

type AddContextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *AddContextRequest) Reset() {
	*x = AddContextRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blowpiperpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddContextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddContextRequest) ProtoMessage() {}

func (x *AddContextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blowpiperpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddContextRequest.ProtoReflect.Descriptor instead.
func (*AddContextRequest) Descriptor() ([]byte, []int) {
	return file_blowpiperpc_proto_rawDescGZIP(), []int{4}
}

func (x *AddContextRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddContextRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type AddContextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *AddContextResponse) Reset() {
	*x = AddContextResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blowpiperpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddContextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddContextResponse) ProtoMessage() {}

func (x *AddContextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blowpiperpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddContextResponse.ProtoReflect.Descriptor instead.
func (*AddContextResponse) Descriptor() ([]byte, []int) {
	return file_blowpiperpc_proto_rawDescGZIP(), []int{5}
}

func (x *AddContextResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AddContextResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteContextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteContextRequest) Reset() {
	*x = DeleteContextRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blowpiperpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteContextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteContextRequest) ProtoMessage() {}

func (x *DeleteContextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blowpiperpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteContextRequest.ProtoReflect.Descriptor instead.
func (*DeleteContextRequest) Descriptor() ([]byte, []int) {
	return file_blowpiperpc_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteContextRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteContextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *DeleteContextResponse) Reset() {
	*x = DeleteContextResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blowpiperpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteContextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteContextResponse) ProtoMessage() {}

func (x *DeleteContextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blowpiperpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteContextResponse.ProtoReflect.Descriptor instead.
func (*DeleteContextResponse) Descriptor() ([]byte, []int) {
	return file_blowpiperpc_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteContextResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type DeleteWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PermanentlyDelete bool   `protobuf:"varint,2,opt,name=permanently_delete,json=permanentlyDelete,proto3" json:"permanently_delete,omitempty"`
}

func (x *DeleteWorkflowRequest) Reset() {
	*x = DeleteWorkflowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blowpiperpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWorkflowRequest) ProtoMessage() {}

func (x *DeleteWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blowpiperpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWorkflowRequest.ProtoReflect.Descriptor instead.
func (*DeleteWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_blowpiperpc_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteWorkflowRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteWorkflowRequest) GetPermanentlyDelete() bool {
	if x != nil {
		return x.PermanentlyDelete
	}
	return false
}

type DeleteWorkflowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *DeleteWorkflowResponse) Reset() {
	*x = DeleteWorkflowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blowpiperpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWorkflowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWorkflowResponse) ProtoMessage() {}

func (x *DeleteWorkflowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blowpiperpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWorkflowResponse.ProtoReflect.Descriptor instead.
func (*DeleteWorkflowResponse) Descriptor() ([]byte, []int) {
	return file_blowpiperpc_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteWorkflowResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteWorkflowResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type AddWorkflowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *AddWorkflowResponse) Reset() {
	*x = AddWorkflowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blowpiperpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddWorkflowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddWorkflowResponse) ProtoMessage() {}

func (x *AddWorkflowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blowpiperpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddWorkflowResponse.ProtoReflect.Descriptor instead.
func (*AddWorkflowResponse) Descriptor() ([]byte, []int) {
	return file_blowpiperpc_proto_rawDescGZIP(), []int{10}
}

func (x *AddWorkflowResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AddWorkflowResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ListWorkflowsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncludeDeleted bool `protobuf:"varint,1,opt,name=include_deleted,json=includeDeleted,proto3" json:"include_deleted,omitempty"`
}

func (x *ListWorkflowsRequest) Reset() {
	*x = ListWorkflowsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blowpiperpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWorkflowsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkflowsRequest) ProtoMessage() {}

func (x *ListWorkflowsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blowpiperpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkflowsRequest.ProtoReflect.Descriptor instead.
func (*ListWorkflowsRequest) Descriptor() ([]byte, []int) {
	return file_blowpiperpc_proto_rawDescGZIP(), []int{11}
}

func (x *ListWorkflowsRequest) GetIncludeDeleted() bool {
	if x != nil {
		return x.IncludeDeleted
	}
	return false
}

type UpdateWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Yaml   string `protobuf:"bytes,2,opt,name=yaml,proto3" json:"yaml,omitempty"`
	Reason string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *UpdateWorkflowRequest) Reset() {
	*x = UpdateWorkflowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blowpiperpc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWorkflowRequest) ProtoMessage() {}

func (x *UpdateWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blowpiperpc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWorkflowRequest.ProtoReflect.Descriptor instead.
func (*UpdateWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_blowpiperpc_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateWorkflowRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateWorkflowRequest) GetYaml() string {
	if x != nil {
		return x.Yaml
	}
	return ""
}

func (x *UpdateWorkflowRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type StatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blowpiperpc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blowpiperpc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_blowpiperpc_proto_rawDescGZIP(), []int{13}
}

func (x *StatusResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type PauseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PauseRequest) Reset() {
	*x = PauseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blowpiperpc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PauseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseRequest) ProtoMessage() {}

func (x *PauseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blowpiperpc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseRequest.ProtoReflect.Descriptor instead.
func (*PauseRequest) Descriptor() ([]byte, []int) {
	return file_blowpiperpc_proto_rawDescGZIP(), []int{14}
}

func (x *PauseRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type PauseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Success bool   `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *PauseResponse) Reset() {
	*x = PauseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blowpiperpc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PauseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseResponse) ProtoMessage() {}

func (x *PauseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blowpiperpc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseResponse.ProtoReflect.Descriptor instead.
func (*PauseResponse) Descriptor() ([]byte, []int) {
	return file_blowpiperpc_proto_rawDescGZIP(), []int{15}
}

func (x *PauseResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PauseResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PauseResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ResumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ResumeRequest) Reset() {
	*x = ResumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blowpiperpc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeRequest) ProtoMessage() {}

func (x *ResumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blowpiperpc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeRequest.ProtoReflect.Descriptor instead.
func (*ResumeRequest) Descriptor() ([]byte, []int) {
	return file_blowpiperpc_proto_rawDescGZIP(), []int{16}
}

func (x *ResumeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ResumeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Success bool   `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ResumeResponse) Reset() {
	*x = ResumeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blowpiperpc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeResponse) ProtoMessage() {}

func (x *ResumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blowpiperpc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeResponse.ProtoReflect.Descriptor instead.
func (*ResumeResponse) Descriptor() ([]byte, []int) {
	return file_blowpiperpc_proto_rawDescGZIP(), []int{17}
}

func (x *ResumeResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ResumeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ResumeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type CancelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CancelRequest) Reset() {
	*x = CancelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blowpiperpc_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelRequest) ProtoMessage() {}

func (x *CancelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blowpiperpc_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelRequest.ProtoReflect.Descriptor instead.
func (*CancelRequest) Descriptor() ([]byte, []int) {
	return file_blowpiperpc_proto_rawDescGZIP(), []int{18}
}

func (x *CancelRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CancelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Success bool   `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *CancelResponse) Reset() {
	*x = CancelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blowpiperpc_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelResponse) ProtoMessage() {}

func (x *CancelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blowpiperpc_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelResponse.ProtoReflect.Descriptor instead.
func (*CancelResponse) Descriptor() ([]byte, []int) {
	return file_blowpiperpc_proto_rawDescGZIP(), []int{19}
}

func (x *CancelResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CancelResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CancelResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type SetWorkflowEnabledRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Enabled bool   `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *SetWorkflowEnabledRequest) Reset() {
	*x = SetWorkflowEnabledRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blowpiperpc_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetWorkflowEnabledRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetWorkflowEnabledRequest) ProtoMessage() {}

func (x *SetWorkflowEnabledRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blowpiperpc_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetWorkflowEnabledRequest.ProtoReflect.Descriptor instead.
func (*SetWorkflowEnabledRequest) Descriptor() ([]byte, []int) {
	return file_blowpiperpc_proto_rawDescGZIP(), []int{20}
}

func (x *SetWorkflowEnabledRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SetWorkflowEnabledRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type SetWorkflowEnabledResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Success bool   `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *SetWorkflowEnabledResponse) Reset() {
	*x = SetWorkflowEnabledResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blowpiperpc_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetWorkflowEnabledResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetWorkflowEnabledResponse) ProtoMessage() {}

func (x *SetWorkflowEnabledResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blowpiperpc_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetWorkflowEnabledResponse.ProtoReflect.Descriptor instead.
func (*SetWorkflowEnabledResponse) Descriptor() ([]byte, []int) {
	return file_blowpiperpc_proto_rawDescGZIP(), []int{21}
}

func (x *SetWorkflowEnabledResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SetWorkflowEnabledResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SetWorkflowEnabledResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type UpdateWorkflowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *UpdateWorkflowResponse) Reset() {
	*x = UpdateWorkflowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blowpiperpc_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWorkflowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWorkflowResponse) ProtoMessage() {}

func (x *UpdateWorkflowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blowpiperpc_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWorkflowResponse.ProtoReflect.Descriptor instead.
func (*UpdateWorkflowResponse) Descriptor() ([]byte, []int) {
	return file_blowpiperpc_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateWorkflowResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateWorkflowResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type Timestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Timestamp) Reset() {
	*x = Timestamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blowpiperpc_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timestamp) ProtoMessage() {}

func (x *Timestamp) ProtoReflect() protoreflect.Message {
	mi := &file_blowpiperpc_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timestamp.ProtoReflect.Descriptor instead.
func (*Timestamp) Descriptor() ([]byte, []int) {
	return file_blowpiperpc_proto_rawDescGZIP(), []int{23}
}

func (x *Timestamp) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type ID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ID) Reset() {
	*x = ID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blowpiperpc_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ID) ProtoMessage() {}

func (x *ID) ProtoReflect() protoreflect.Message {
	mi := &file_blowpiperpc_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ID.ProtoReflect.Descriptor instead.
func (*ID) Descriptor() ([]byte, []int) {
	return file_blowpiperpc_proto_rawDescGZIP(), []int{24}
}

func (x *ID) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Version int32  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *GetWorkflowRequest) Reset() {
	*x = GetWorkflowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blowpiperpc_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkflowRequest) ProtoMessage() {}

func (x *GetWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blowpiperpc_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkflowRequest.ProtoReflect.Descriptor instead.
func (*GetWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_blowpiperpc_proto_rawDescGZIP(), []int{25}
}

func (x *GetWorkflowRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetWorkflowRequest) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type GetWorkflowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success  bool      `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message  string    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Workflow *Workflow `protobuf:"bytes,3,opt,name=workflow,proto3" json:"workflow,omitempty"`
}

func (x *GetWorkflowResponse) Reset() {
	*x = GetWorkflowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blowpiperpc_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkflowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkflowResponse) ProtoMessage() {}

func (x *GetWorkflowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blowpiperpc_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkflowResponse.ProtoReflect.Descriptor instead.
func (*GetWorkflowResponse) Descriptor() ([]byte, []int) {
	return file_blowpiperpc_proto_rawDescGZIP(), []int{26}
}

func (x *GetWorkflowResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetWorkflowResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetWorkflowResponse) GetWorkflow() *Workflow {
	if x != nil {
		return x.Workflow
	}
	return nil
}

type GetConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *GetConfigRequest) Reset() {
	*x = GetConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blowpiperpc_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigRequest) ProtoMessage() {}

func (x *GetConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blowpiperpc_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigRequest.ProtoReflect.Descriptor instead.
func (*GetConfigRequest) Descriptor() ([]byte, []int) {
	return file_blowpiperpc_proto_rawDescGZIP(), []int{27}
}

func (x *GetConfigRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type DeleteConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *DeleteConfigRequest) Reset() {
	*x = DeleteConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blowpiperpc_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConfigRequest) ProtoMessage() {}

func (x *DeleteConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blowpiperpc_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConfigRequest.ProtoReflect.Descriptor instead.
func (*DeleteConfigRequest) Descriptor() ([]byte, []int) {
	return file_blowpiperpc_proto_rawDescGZIP(), []int{28}
}

func (x *DeleteConfigRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type DeleteConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Key     string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteConfigResponse) Reset() {
	*x = DeleteConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blowpiperpc_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConfigResponse) ProtoMessage() {}

func (x *DeleteConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blowpiperpc_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConfigResponse.ProtoReflect.Descriptor instead.
func (*DeleteConfigResponse) Descriptor() ([]byte, []int) {
	return file_blowpiperpc_proto_rawDescGZIP(), []int{29}
}

func (x *DeleteConfigResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteConfigResponse) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DeleteConfigResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time       int32  `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	LogLevel   string `protobuf:"bytes,2,opt,name=log_level,json=logLevel,proto3" json:"log_level,omitempty"`
	LogSource  string `protobuf:"bytes,3,opt,name=log_source,json=logSource,proto3" json:"log_source,omitempty"`
	Grep       string `protobuf:"bytes,4,opt,name=grep,proto3" json:"grep,omitempty"`                               // what to look for
	Grepv      string `protobuf:"bytes,5,opt,name=grepv,proto3" json:"grepv,omitempty"`                             // what to exclude
	Tail       bool   `protobuf:"varint,6,opt,name=tail,proto3" json:"tail,omitempty"`                              // if tail, continually stream
	RunId      string `protobuf:"bytes,7,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`                // lines for run_id
	WorkflowId string `protobuf:"bytes,9,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"` // lines for workflow_id
	DateFrom   string `protobuf:"bytes,10,opt,name=date_from,json=dateFrom,proto3" json:"date_from,omitempty"`      // lines from this date/time yyyy-mm-dd hh:mm:ss
	DateTo     string `protobuf:"bytes,11,opt,name=date_to,json=dateTo,proto3" json:"date_to,omitempty"`            // lines up to this date/time yyyy-mm-dd hh:mm:ss
	Username   string `protobuf:"bytes,12,opt,name=username,proto3" json:"username,omitempty"`                      // the author of the logs
}

func (x *GetLogRequest) Reset() {
	*x = GetLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blowpiperpc_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogRequest) ProtoMessage() {}

func (x *GetLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blowpiperpc_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogRequest.ProtoReflect.Descriptor instead.
func (*GetLogRequest) Descriptor() ([]byte, []int) {
	return file_blowpiperpc_proto_rawDescGZIP(), []int{30}
}

func (x *GetLogRequest) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *GetLogRequest) GetLogLevel() string {
	if x != nil {
		return x.LogLevel
	}
	return ""
}

func (x *GetLogRequest) GetLogSource() string {
	if x != nil {
		return x.LogSource
	}
	return ""
}

func (x *GetLogRequest) GetGrep() string {
	if x != nil {
		return x.Grep
	}
	return ""
}

func (x *GetLogRequest) GetGrepv() string {
	if x != nil {
		return x.Grepv
	}
	return ""
}

func (x *GetLogRequest) GetTail() bool {
	if x != nil {
		return x.Tail
	}
	return false
}

func (x *GetLogRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *GetLogRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *GetLogRequest) GetDateFrom() string {
	if x != nil {
		return x.DateFrom
	}
	return ""
}

func (x *GetLogRequest) GetDateTo() string {
	if x != nil {
		return x.DateTo
	}
	return ""
}

func (x *GetLogRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type GetLogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogMessage string `protobuf:"bytes,1,opt,name=log_message,json=logMessage,proto3" json:"log_message,omitempty"`
}

func (x *GetLogResponse) Reset() {
	*x = GetLogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blowpiperpc_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogResponse) ProtoMessage() {}

func (x *GetLogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blowpiperpc_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogResponse.ProtoReflect.Descriptor instead.
func (*GetLogResponse) Descriptor() ([]byte, []int) {
	return file_blowpiperpc_proto_rawDescGZIP(), []int{31}
}

func (x *GetLogResponse) GetLogMessage() string {
	if x != nil {
		return x.LogMessage
	}
	return ""
}

type GetConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value   string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Success bool   `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *GetConfigResponse) Reset() {
	*x = GetConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blowpiperpc_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigResponse) ProtoMessage() {}

func (x *GetConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blowpiperpc_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigResponse.ProtoReflect.Descriptor instead.
func (*GetConfigResponse) Descriptor() ([]byte, []int) {
	return file_blowpiperpc_proto_rawDescGZIP(), []int{32}
}

func (x *GetConfigResponse) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GetConfigResponse) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *GetConfigResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type SetConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SetConfigRequest) Reset() {
	*x = SetConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blowpiperpc_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConfigRequest) ProtoMessage() {}

func (x *SetConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blowpiperpc_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConfigRequest.ProtoReflect.Descriptor instead.
func (*SetConfigRequest) Descriptor() ([]byte, []int) {
	return file_blowpiperpc_proto_rawDescGZIP(), []int{33}
}

func (x *SetConfigRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SetConfigRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type SetConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *SetConfigResponse) Reset() {
	*x = SetConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blowpiperpc_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConfigResponse) ProtoMessage() {}

func (x *SetConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blowpiperpc_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConfigResponse.ProtoReflect.Descriptor instead.
func (*SetConfigResponse) Descriptor() ([]byte, []int) {
	return file_blowpiperpc_proto_rawDescGZIP(), []int{34}
}

func (x *SetConfigResponse) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SetConfigResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type Workflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Yaml         string `protobuf:"bytes,2,opt,name=yaml,proto3" json:"yaml,omitempty"`
	IsDeleted    bool   `protobuf:"varint,3,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	IsEnabled    bool   `protobuf:"varint,4,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	Created      string `protobuf:"bytes,5,opt,name=created,proto3" json:"created,omitempty"`
	LastModified string `protobuf:"bytes,6,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	Version      int32  `protobuf:"varint,7,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Workflow) Reset() {
	*x = Workflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blowpiperpc_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Workflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workflow) ProtoMessage() {}

func (x *Workflow) ProtoReflect() protoreflect.Message {
	mi := &file_blowpiperpc_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workflow.ProtoReflect.Descriptor instead.
func (*Workflow) Descriptor() ([]byte, []int) {
	return file_blowpiperpc_proto_rawDescGZIP(), []int{35}
}

func (x *Workflow) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Workflow) GetYaml() string {
	if x != nil {
		return x.Yaml
	}
	return ""
}

func (x *Workflow) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

func (x *Workflow) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *Workflow) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *Workflow) GetLastModified() string {
	if x != nil {
		return x.LastModified
	}
	return ""
}

func (x *Workflow) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type WorkflowHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Date    string `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	Version int32  `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	Reason  string `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	Yaml    string `protobuf:"bytes,5,opt,name=yaml,proto3" json:"yaml,omitempty"`
}

func (x *WorkflowHistory) Reset() {
	*x = WorkflowHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blowpiperpc_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowHistory) ProtoMessage() {}

func (x *WorkflowHistory) ProtoReflect() protoreflect.Message {
	mi := &file_blowpiperpc_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowHistory.ProtoReflect.Descriptor instead.
func (*WorkflowHistory) Descriptor() ([]byte, []int) {
	return file_blowpiperpc_proto_rawDescGZIP(), []int{36}
}

func (x *WorkflowHistory) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WorkflowHistory) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *WorkflowHistory) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *WorkflowHistory) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *WorkflowHistory) GetYaml() string {
	if x != nil {
		return x.Yaml
	}
	return ""
}

type RunningWorkflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	State        string    `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Created      string    `protobuf:"bytes,3,opt,name=created,proto3" json:"created,omitempty"`
	LastModified string    `protobuf:"bytes,4,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	Workflow     *Workflow `protobuf:"bytes,5,opt,name=workflow,proto3" json:"workflow,omitempty"`
}

func (x *RunningWorkflow) Reset() {
	*x = RunningWorkflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blowpiperpc_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunningWorkflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunningWorkflow) ProtoMessage() {}

func (x *RunningWorkflow) ProtoReflect() protoreflect.Message {
	mi := &file_blowpiperpc_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunningWorkflow.ProtoReflect.Descriptor instead.
func (*RunningWorkflow) Descriptor() ([]byte, []int) {
	return file_blowpiperpc_proto_rawDescGZIP(), []int{37}
}

func (x *RunningWorkflow) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RunningWorkflow) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *RunningWorkflow) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *RunningWorkflow) GetLastModified() string {
	if x != nil {
		return x.LastModified
	}
	return ""
}

func (x *RunningWorkflow) GetWorkflow() *Workflow {
	if x != nil {
		return x.Workflow
	}
	return nil
}

type ListRunningWorkflowsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncludeCompleted bool   `protobuf:"varint,1,opt,name=include_completed,json=includeCompleted,proto3" json:"include_completed,omitempty"`
	Since            string `protobuf:"bytes,2,opt,name=since,proto3" json:"since,omitempty"`
}

func (x *ListRunningWorkflowsRequest) Reset() {
	*x = ListRunningWorkflowsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blowpiperpc_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRunningWorkflowsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRunningWorkflowsRequest) ProtoMessage() {}

func (x *ListRunningWorkflowsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blowpiperpc_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRunningWorkflowsRequest.ProtoReflect.Descriptor instead.
func (*ListRunningWorkflowsRequest) Descriptor() ([]byte, []int) {
	return file_blowpiperpc_proto_rawDescGZIP(), []int{38}
}

func (x *ListRunningWorkflowsRequest) GetIncludeCompleted() bool {
	if x != nil {
		return x.IncludeCompleted
	}
	return false
}

func (x *ListRunningWorkflowsRequest) GetSince() string {
	if x != nil {
		return x.Since
	}
	return ""
}

type GetRunningWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetRunningWorkflowRequest) Reset() {
	*x = GetRunningWorkflowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blowpiperpc_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRunningWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRunningWorkflowRequest) ProtoMessage() {}

func (x *GetRunningWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blowpiperpc_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRunningWorkflowRequest.ProtoReflect.Descriptor instead.
func (*GetRunningWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_blowpiperpc_proto_rawDescGZIP(), []int{39}
}

func (x *GetRunningWorkflowRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetRunningWorkflowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success         bool             `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	RunningWorkflow *RunningWorkflow `protobuf:"bytes,2,opt,name=running_workflow,json=runningWorkflow,proto3" json:"running_workflow,omitempty"`
	Message         string           `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetRunningWorkflowResponse) Reset() {
	*x = GetRunningWorkflowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blowpiperpc_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRunningWorkflowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRunningWorkflowResponse) ProtoMessage() {}

func (x *GetRunningWorkflowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blowpiperpc_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRunningWorkflowResponse.ProtoReflect.Descriptor instead.
func (*GetRunningWorkflowResponse) Descriptor() ([]byte, []int) {
	return file_blowpiperpc_proto_rawDescGZIP(), []int{40}
}

func (x *GetRunningWorkflowResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetRunningWorkflowResponse) GetRunningWorkflow() *RunningWorkflow {
	if x != nil {
		return x.RunningWorkflow
	}
	return nil
}

func (x *GetRunningWorkflowResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ManualTriggerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ManualTriggerRequest) Reset() {
	*x = ManualTriggerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blowpiperpc_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManualTriggerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualTriggerRequest) ProtoMessage() {}

func (x *ManualTriggerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blowpiperpc_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualTriggerRequest.ProtoReflect.Descriptor instead.
func (*ManualTriggerRequest) Descriptor() ([]byte, []int) {
	return file_blowpiperpc_proto_rawDescGZIP(), []int{41}
}

func (x *ManualTriggerRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ManualTriggerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success    bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`                        // true/false for triggering
	WorkflowId string `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"` // workflow being triggered
	RunId      string `protobuf:"bytes,3,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`                // id of the running_workflow entry
	Message    string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`                         // any relevant message (useful if it fails)
}

func (x *ManualTriggerResponse) Reset() {
	*x = ManualTriggerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blowpiperpc_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManualTriggerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualTriggerResponse) ProtoMessage() {}

func (x *ManualTriggerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blowpiperpc_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualTriggerResponse.ProtoReflect.Descriptor instead.
func (*ManualTriggerResponse) Descriptor() ([]byte, []int) {
	return file_blowpiperpc_proto_rawDescGZIP(), []int{42}
}

func (x *ManualTriggerResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ManualTriggerResponse) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *ManualTriggerResponse) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *ManualTriggerResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type AddUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *AddUserRequest) Reset() {
	*x = AddUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blowpiperpc_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserRequest) ProtoMessage() {}

func (x *AddUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blowpiperpc_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserRequest.ProtoReflect.Descriptor instead.
func (*AddUserRequest) Descriptor() ([]byte, []int) {
	return file_blowpiperpc_proto_rawDescGZIP(), []int{43}
}

func (x *AddUserRequest) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type AddUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Id      string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *AddUserResponse) Reset() {
	*x = AddUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blowpiperpc_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserResponse) ProtoMessage() {}

func (x *AddUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blowpiperpc_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserResponse.ProtoReflect.Descriptor instead.
func (*AddUserResponse) Descriptor() ([]byte, []int) {
	return file_blowpiperpc_proto_rawDescGZIP(), []int{44}
}

func (x *AddUserResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AddUserResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AddUserResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DeleteUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *DeleteUserRequest) Reset() {
	*x = DeleteUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blowpiperpc_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserRequest) ProtoMessage() {}

func (x *DeleteUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blowpiperpc_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserRequest.ProtoReflect.Descriptor instead.
func (*DeleteUserRequest) Descriptor() ([]byte, []int) {
	return file_blowpiperpc_proto_rawDescGZIP(), []int{45}
}

func (x *DeleteUserRequest) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type DeleteUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteUserResponse) Reset() {
	*x = DeleteUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blowpiperpc_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserResponse) ProtoMessage() {}

func (x *DeleteUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blowpiperpc_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserResponse.ProtoReflect.Descriptor instead.
func (*DeleteUserResponse) Descriptor() ([]byte, []int) {
	return file_blowpiperpc_proto_rawDescGZIP(), []int{46}
}

func (x *DeleteUserResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteUserResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type UpdateUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *UpdateUserRequest) Reset() {
	*x = UpdateUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blowpiperpc_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserRequest) ProtoMessage() {}

func (x *UpdateUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blowpiperpc_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserRequest) Descriptor() ([]byte, []int) {
	return file_blowpiperpc_proto_rawDescGZIP(), []int{47}
}

func (x *UpdateUserRequest) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type UpdateUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateUserResponse) Reset() {
	*x = UpdateUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blowpiperpc_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserResponse) ProtoMessage() {}

func (x *UpdateUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blowpiperpc_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserResponse) Descriptor() ([]byte, []int) {
	return file_blowpiperpc_proto_rawDescGZIP(), []int{48}
}

func (x *UpdateUserResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateUserResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_blowpiperpc_proto protoreflect.FileDescriptor

var file_blowpiperpc_proto_rawDesc = []byte{
	0x0a, 0x11, 0x62, 0x6c, 0x6f, 0x77, 0x70, 0x69, 0x70, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x62, 0x6c, 0x6f, 0x77, 0x70, 0x69, 0x70, 0x65, 0x72, 0x70, 0x63,
	0x22, 0x32, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4f, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2b, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x67,
	0x65, 0x78, 0x22, 0x28, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x22, 0x49, 0x0a, 0x11,
	0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x42, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x26, 0x0a, 0x14, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x31, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x56, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x2d, 0x0a, 0x12, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x70, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x42,
	0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x22, 0x3f, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x22, 0x3f, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x22, 0x53, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x79, 0x61, 0x6d, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x79, 0x61, 0x6d,
	0x6c, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x2a, 0x0a, 0x0e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x1e, 0x0a, 0x0c, 0x50, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x53, 0x0a, 0x0d, 0x50, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x1f, 0x0a, 0x0d, 0x52, 0x65,
	0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x54, 0x0a, 0x0e, 0x52,
	0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x22, 0x1f, 0x0a, 0x0d, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x54, 0x0a, 0x0e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x45, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22,
	0x60, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x22, 0x42, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x21, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x14, 0x0a, 0x02, 0x49, 0x44, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3e,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x7c,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6c,
	0x6f, 0x77, 0x70, 0x69, 0x70, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x22, 0x24, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x22, 0x27, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x5c, 0x0a, 0x14, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa7, 0x02, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6c, 0x6f, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x67,
	0x72, 0x65, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x72, 0x65, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x67, 0x72, 0x65, 0x70, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x67, 0x72, 0x65, 0x70, 0x76, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x17,
	0x0a, 0x07, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x31, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x55, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x3a, 0x0a,
	0x10, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3f, 0x0a, 0x11, 0x53, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xc5, 0x01, 0x0a, 0x08, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x61, 0x6d, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x79, 0x61, 0x6d, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x7b, 0x0a, 0x0f, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x79,
	0x61, 0x6d, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x79, 0x61, 0x6d, 0x6c, 0x22,
	0xa9, 0x01, 0x0a, 0x0f, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6c, 0x6f,
	0x77, 0x70, 0x69, 0x70, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x22, 0x60, 0x0a, 0x1b, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x22, 0x2b, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x99, 0x01, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x47, 0x0a, 0x10, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x62, 0x6c, 0x6f, 0x77, 0x70, 0x69, 0x70, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x0f, 0x72, 0x75, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x26, 0x0a, 0x14, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x83,
	0x01, 0x0a, 0x15, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x37, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6c, 0x6f, 0x77, 0x70, 0x69, 0x70, 0x65, 0x72,
	0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x55, 0x0a,
	0x0f, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6c, 0x6f, 0x77, 0x70, 0x69,
	0x70, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x22, 0x48, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x0a, 0x11, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x25, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x62, 0x6c, 0x6f, 0x77, 0x70, 0x69, 0x70, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x48, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x32, 0xcc, 0x10, 0x0a, 0x08, 0x42, 0x6c, 0x6f, 0x77, 0x70, 0x69, 0x70, 0x65, 0x12, 0x4a, 0x0a,
	0x0c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x12, 0x20, 0x2e,
	0x62, 0x6c, 0x6f, 0x77, 0x70, 0x69, 0x70, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x14, 0x2e, 0x62, 0x6c, 0x6f, 0x77, 0x70, 0x69, 0x70, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12, 0x51, 0x0a, 0x0a, 0x41, 0x64, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x2e, 0x62, 0x6c, 0x6f, 0x77, 0x70, 0x69,
	0x70, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x62, 0x6c, 0x6f, 0x77, 0x70, 0x69,
	0x70, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x5a, 0x0a, 0x0d,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x21, 0x2e,
	0x62, 0x6c, 0x6f, 0x77, 0x70, 0x69, 0x70, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x62, 0x6c, 0x6f, 0x77, 0x70, 0x69, 0x70, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x41, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x2e, 0x62, 0x6c, 0x6f, 0x77, 0x70, 0x69, 0x70, 0x65,
	0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x62, 0x6c, 0x6f, 0x77, 0x70, 0x69, 0x70, 0x65, 0x72,
	0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00, 0x30, 0x01, 0x12, 0x48, 0x0a, 0x07, 0x41,
	0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x62, 0x6c, 0x6f, 0x77, 0x70, 0x69, 0x70,
	0x65, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x62, 0x6c, 0x6f, 0x77, 0x70, 0x69, 0x70, 0x65, 0x72, 0x70,
	0x63, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x51, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x62, 0x6c, 0x6f, 0x77, 0x70, 0x69, 0x70, 0x65, 0x72, 0x70,
	0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x62, 0x6c, 0x6f, 0x77, 0x70, 0x69, 0x70, 0x65, 0x72, 0x70,
	0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x51, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x62, 0x6c, 0x6f, 0x77, 0x70, 0x69, 0x70,
	0x65, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x62, 0x6c, 0x6f, 0x77, 0x70, 0x69, 0x70,
	0x65, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x4d, 0x0a, 0x0d, 0x4c,
	0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x21, 0x2e, 0x62,
	0x6c, 0x6f, 0x77, 0x70, 0x69, 0x70, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x15, 0x2e, 0x62, 0x6c, 0x6f, 0x77, 0x70, 0x69, 0x70, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x22, 0x00, 0x30, 0x01, 0x12, 0x48, 0x0a, 0x13, 0x4c, 0x69,
	0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x0f, 0x2e, 0x62, 0x6c, 0x6f, 0x77, 0x70, 0x69, 0x70, 0x65, 0x72, 0x70, 0x63, 0x2e,
	0x49, 0x44, 0x1a, 0x1c, 0x2e, 0x62, 0x6c, 0x6f, 0x77, 0x70, 0x69, 0x70, 0x65, 0x72, 0x70, 0x63,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x52, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x12, 0x1f, 0x2e, 0x62, 0x6c, 0x6f, 0x77, 0x70, 0x69, 0x70, 0x65, 0x72, 0x70,
	0x63, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x62, 0x6c, 0x6f, 0x77, 0x70, 0x69, 0x70, 0x65, 0x72,
	0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x15, 0x2e, 0x62, 0x6c, 0x6f, 0x77, 0x70, 0x69,
	0x70, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x1a, 0x20,
	0x2e, 0x62, 0x6c, 0x6f, 0x77, 0x70, 0x69, 0x70, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x12, 0x22, 0x2e, 0x62, 0x6c, 0x6f, 0x77, 0x70, 0x69, 0x70, 0x65, 0x72,
	0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x62, 0x6c, 0x6f, 0x77, 0x70,
	0x69, 0x70, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5b, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x12, 0x22, 0x2e, 0x62, 0x6c, 0x6f, 0x77, 0x70, 0x69, 0x70, 0x65, 0x72, 0x70, 0x63, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x62, 0x6c, 0x6f, 0x77, 0x70, 0x69, 0x70, 0x65,
	0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x2e, 0x62, 0x6c, 0x6f, 0x77, 0x70, 0x69, 0x70,
	0x65, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0x1b,
	0x2e, 0x62, 0x6c, 0x6f, 0x77, 0x70, 0x69, 0x70, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a,
	0x12, 0x53, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x26, 0x2e, 0x62, 0x6c, 0x6f, 0x77, 0x70, 0x69, 0x70, 0x65, 0x72, 0x70,
	0x63, 0x2e, 0x53, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x62, 0x6c,
	0x6f, 0x77, 0x70, 0x69, 0x70, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x05, 0x50, 0x61, 0x75, 0x73, 0x65, 0x12,
	0x19, 0x2e, 0x62, 0x6c, 0x6f, 0x77, 0x70, 0x69, 0x70, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61,
	0x75, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x62, 0x6c, 0x6f,
	0x77, 0x70, 0x69, 0x70, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x12, 0x1a, 0x2e, 0x62, 0x6c, 0x6f, 0x77, 0x70, 0x69, 0x70, 0x65, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x62, 0x6c, 0x6f, 0x77, 0x70, 0x69, 0x70, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a,
	0x06, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x1a, 0x2e, 0x62, 0x6c, 0x6f, 0x77, 0x70, 0x69,
	0x70, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x62, 0x6c, 0x6f, 0x77, 0x70, 0x69, 0x70, 0x65, 0x72, 0x70,
	0x63, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x16, 0x2e, 0x62, 0x6c, 0x6f, 0x77, 0x70, 0x69, 0x70, 0x65, 0x72, 0x70, 0x63,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0x1e, 0x2e, 0x62, 0x6c, 0x6f,
	0x77, 0x70, 0x69, 0x70, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x4c,
	0x0a, 0x09, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x2e, 0x62, 0x6c,
	0x6f, 0x77, 0x70, 0x69, 0x70, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x62, 0x6c, 0x6f,
	0x77, 0x70, 0x69, 0x70, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x09,
	0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x2e, 0x62, 0x6c, 0x6f, 0x77,
	0x70, 0x69, 0x70, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x62, 0x6c, 0x6f, 0x77, 0x70,
	0x69, 0x70, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0c, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x20, 0x2e, 0x62, 0x6c, 0x6f,
	0x77, 0x70, 0x69, 0x70, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x62,
	0x6c, 0x6f, 0x77, 0x70, 0x69, 0x70, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x45, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x1a, 0x2e, 0x62, 0x6c,
	0x6f, 0x77, 0x70, 0x69, 0x70, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x62, 0x6c, 0x6f, 0x77, 0x70, 0x69,
	0x70, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x58, 0x0a, 0x0d, 0x4d, 0x61, 0x6e, 0x75,
	0x61, 0x6c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x62, 0x6c, 0x6f, 0x77,
	0x70, 0x69, 0x70, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x62,
	0x6c, 0x6f, 0x77, 0x70, 0x69, 0x70, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x62, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x28, 0x2e, 0x62, 0x6c, 0x6f,
	0x77, 0x70, 0x69, 0x70, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x62, 0x6c, 0x6f, 0x77, 0x70, 0x69, 0x70, 0x65, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x22, 0x00, 0x30, 0x01, 0x12, 0x67, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x26, 0x2e, 0x62,
	0x6c, 0x6f, 0x77, 0x70, 0x69, 0x70, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x62, 0x6c, 0x6f, 0x77, 0x70, 0x69, 0x70, 0x65, 0x72,
	0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0x03, 0x5a, 0x01, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_blowpiperpc_proto_rawDescOnce sync.Once
	file_blowpiperpc_proto_rawDescData = file_blowpiperpc_proto_rawDesc
)

func file_blowpiperpc_proto_rawDescGZIP() []byte {
	file_blowpiperpc_proto_rawDescOnce.Do(func() {
		file_blowpiperpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_blowpiperpc_proto_rawDescData)
	})
	return file_blowpiperpc_proto_rawDescData
}

var file_blowpiperpc_proto_msgTypes = make([]protoimpl.MessageInfo, 49)
var file_blowpiperpc_proto_goTypes = []interface{}{
	(*User)(nil),                        // 0: blowpiperpc.User
	(*Context)(nil),                     // 1: blowpiperpc.Context
	(*ListContextsRequest)(nil),         // 2: blowpiperpc.ListContextsRequest
	(*ListUsersRequest)(nil),            // 3: blowpiperpc.ListUsersRequest
	(*AddContextRequest)(nil),           // 4: blowpiperpc.AddContextRequest
	(*AddContextResponse)(nil),          // 5: blowpiperpc.AddContextResponse
	(*DeleteContextRequest)(nil),        // 6: blowpiperpc.DeleteContextRequest
	(*DeleteContextResponse)(nil),       // 7: blowpiperpc.DeleteContextResponse
	(*DeleteWorkflowRequest)(nil),       // 8: blowpiperpc.DeleteWorkflowRequest
	(*DeleteWorkflowResponse)(nil),      // 9: blowpiperpc.DeleteWorkflowResponse
	(*AddWorkflowResponse)(nil),         // 10: blowpiperpc.AddWorkflowResponse
	(*ListWorkflowsRequest)(nil),        // 11: blowpiperpc.ListWorkflowsRequest
	(*UpdateWorkflowRequest)(nil),       // 12: blowpiperpc.UpdateWorkflowRequest
	(*StatusResponse)(nil),              // 13: blowpiperpc.StatusResponse
	(*PauseRequest)(nil),                // 14: blowpiperpc.PauseRequest
	(*PauseResponse)(nil),               // 15: blowpiperpc.PauseResponse
	(*ResumeRequest)(nil),               // 16: blowpiperpc.ResumeRequest
	(*ResumeResponse)(nil),              // 17: blowpiperpc.ResumeResponse
	(*CancelRequest)(nil),               // 18: blowpiperpc.CancelRequest
	(*CancelResponse)(nil),              // 19: blowpiperpc.CancelResponse
	(*SetWorkflowEnabledRequest)(nil),   // 20: blowpiperpc.SetWorkflowEnabledRequest
	(*SetWorkflowEnabledResponse)(nil),  // 21: blowpiperpc.SetWorkflowEnabledResponse
	(*UpdateWorkflowResponse)(nil),      // 22: blowpiperpc.UpdateWorkflowResponse
	(*Timestamp)(nil),                   // 23: blowpiperpc.Timestamp
	(*ID)(nil),                          // 24: blowpiperpc.ID
	(*GetWorkflowRequest)(nil),          // 25: blowpiperpc.GetWorkflowRequest
	(*GetWorkflowResponse)(nil),         // 26: blowpiperpc.GetWorkflowResponse
	(*GetConfigRequest)(nil),            // 27: blowpiperpc.GetConfigRequest
	(*DeleteConfigRequest)(nil),         // 28: blowpiperpc.DeleteConfigRequest
	(*DeleteConfigResponse)(nil),        // 29: blowpiperpc.DeleteConfigResponse
	(*GetLogRequest)(nil),               // 30: blowpiperpc.GetLogRequest
	(*GetLogResponse)(nil),              // 31: blowpiperpc.GetLogResponse
	(*GetConfigResponse)(nil),           // 32: blowpiperpc.GetConfigResponse
	(*SetConfigRequest)(nil),            // 33: blowpiperpc.SetConfigRequest
	(*SetConfigResponse)(nil),           // 34: blowpiperpc.SetConfigResponse
	(*Workflow)(nil),                    // 35: blowpiperpc.Workflow
	(*WorkflowHistory)(nil),             // 36: blowpiperpc.WorkflowHistory
	(*RunningWorkflow)(nil),             // 37: blowpiperpc.RunningWorkflow
	(*ListRunningWorkflowsRequest)(nil), // 38: blowpiperpc.ListRunningWorkflowsRequest
	(*GetRunningWorkflowRequest)(nil),   // 39: blowpiperpc.GetRunningWorkflowRequest
	(*GetRunningWorkflowResponse)(nil),  // 40: blowpiperpc.GetRunningWorkflowResponse
	(*ManualTriggerRequest)(nil),        // 41: blowpiperpc.ManualTriggerRequest
	(*ManualTriggerResponse)(nil),       // 42: blowpiperpc.ManualTriggerResponse
	(*AddUserRequest)(nil),              // 43: blowpiperpc.AddUserRequest
	(*AddUserResponse)(nil),             // 44: blowpiperpc.AddUserResponse
	(*DeleteUserRequest)(nil),           // 45: blowpiperpc.DeleteUserRequest
	(*DeleteUserResponse)(nil),          // 46: blowpiperpc.DeleteUserResponse
	(*UpdateUserRequest)(nil),           // 47: blowpiperpc.UpdateUserRequest
	(*UpdateUserResponse)(nil),          // 48: blowpiperpc.UpdateUserResponse
}
var file_blowpiperpc_proto_depIdxs = []int32{
	35, // 0: blowpiperpc.GetWorkflowResponse.workflow:type_name -> blowpiperpc.Workflow
	35, // 1: blowpiperpc.RunningWorkflow.workflow:type_name -> blowpiperpc.Workflow
	37, // 2: blowpiperpc.GetRunningWorkflowResponse.running_workflow:type_name -> blowpiperpc.RunningWorkflow
	0,  // 3: blowpiperpc.AddUserRequest.user:type_name -> blowpiperpc.User
	0,  // 4: blowpiperpc.DeleteUserRequest.user:type_name -> blowpiperpc.User
	0,  // 5: blowpiperpc.UpdateUserRequest.user:type_name -> blowpiperpc.User
	2,  // 6: blowpiperpc.Blowpipe.ListContexts:input_type -> blowpiperpc.ListContextsRequest
	4,  // 7: blowpiperpc.Blowpipe.AddContext:input_type -> blowpiperpc.AddContextRequest
	6,  // 8: blowpiperpc.Blowpipe.DeleteContext:input_type -> blowpiperpc.DeleteContextRequest
	3,  // 9: blowpiperpc.Blowpipe.ListUsers:input_type -> blowpiperpc.ListUsersRequest
	43, // 10: blowpiperpc.Blowpipe.AddUser:input_type -> blowpiperpc.AddUserRequest
	47, // 11: blowpiperpc.Blowpipe.UpdateUser:input_type -> blowpiperpc.UpdateUserRequest
	45, // 12: blowpiperpc.Blowpipe.DeleteUser:input_type -> blowpiperpc.DeleteUserRequest
	11, // 13: blowpiperpc.Blowpipe.ListWorkflows:input_type -> blowpiperpc.ListWorkflowsRequest
	24, // 14: blowpiperpc.Blowpipe.ListWorkflowHistory:input_type -> blowpiperpc.ID
	25, // 15: blowpiperpc.Blowpipe.GetWorkflow:input_type -> blowpiperpc.GetWorkflowRequest
	35, // 16: blowpiperpc.Blowpipe.AddWorkflow:input_type -> blowpiperpc.Workflow
	12, // 17: blowpiperpc.Blowpipe.UpdateWorkflow:input_type -> blowpiperpc.UpdateWorkflowRequest
	8,  // 18: blowpiperpc.Blowpipe.DeleteWorkflow:input_type -> blowpiperpc.DeleteWorkflowRequest
	23, // 19: blowpiperpc.Blowpipe.Status:input_type -> blowpiperpc.Timestamp
	20, // 20: blowpiperpc.Blowpipe.SetWorkflowEnabled:input_type -> blowpiperpc.SetWorkflowEnabledRequest
	14, // 21: blowpiperpc.Blowpipe.Pause:input_type -> blowpiperpc.PauseRequest
	16, // 22: blowpiperpc.Blowpipe.Resume:input_type -> blowpiperpc.ResumeRequest
	18, // 23: blowpiperpc.Blowpipe.Cancel:input_type -> blowpiperpc.CancelRequest
	23, // 24: blowpiperpc.Blowpipe.GetAllConfig:input_type -> blowpiperpc.Timestamp
	27, // 25: blowpiperpc.Blowpipe.GetConfig:input_type -> blowpiperpc.GetConfigRequest
	33, // 26: blowpiperpc.Blowpipe.SetConfig:input_type -> blowpiperpc.SetConfigRequest
	28, // 27: blowpiperpc.Blowpipe.DeleteConfig:input_type -> blowpiperpc.DeleteConfigRequest
	30, // 28: blowpiperpc.Blowpipe.GetLog:input_type -> blowpiperpc.GetLogRequest
	41, // 29: blowpiperpc.Blowpipe.ManualTrigger:input_type -> blowpiperpc.ManualTriggerRequest
	38, // 30: blowpiperpc.Blowpipe.ListRunningWorkflows:input_type -> blowpiperpc.ListRunningWorkflowsRequest
	39, // 31: blowpiperpc.Blowpipe.GetRunningWorkflow:input_type -> blowpiperpc.GetRunningWorkflowRequest
	1,  // 32: blowpiperpc.Blowpipe.ListContexts:output_type -> blowpiperpc.Context
	5,  // 33: blowpiperpc.Blowpipe.AddContext:output_type -> blowpiperpc.AddContextResponse
	7,  // 34: blowpiperpc.Blowpipe.DeleteContext:output_type -> blowpiperpc.DeleteContextResponse
	0,  // 35: blowpiperpc.Blowpipe.ListUsers:output_type -> blowpiperpc.User
	44, // 36: blowpiperpc.Blowpipe.AddUser:output_type -> blowpiperpc.AddUserResponse
	48, // 37: blowpiperpc.Blowpipe.UpdateUser:output_type -> blowpiperpc.UpdateUserResponse
	46, // 38: blowpiperpc.Blowpipe.DeleteUser:output_type -> blowpiperpc.DeleteUserResponse
	35, // 39: blowpiperpc.Blowpipe.ListWorkflows:output_type -> blowpiperpc.Workflow
	36, // 40: blowpiperpc.Blowpipe.ListWorkflowHistory:output_type -> blowpiperpc.WorkflowHistory
	26, // 41: blowpiperpc.Blowpipe.GetWorkflow:output_type -> blowpiperpc.GetWorkflowResponse
	10, // 42: blowpiperpc.Blowpipe.AddWorkflow:output_type -> blowpiperpc.AddWorkflowResponse
	22, // 43: blowpiperpc.Blowpipe.UpdateWorkflow:output_type -> blowpiperpc.UpdateWorkflowResponse
	9,  // 44: blowpiperpc.Blowpipe.DeleteWorkflow:output_type -> blowpiperpc.DeleteWorkflowResponse
	13, // 45: blowpiperpc.Blowpipe.Status:output_type -> blowpiperpc.StatusResponse
	21, // 46: blowpiperpc.Blowpipe.SetWorkflowEnabled:output_type -> blowpiperpc.SetWorkflowEnabledResponse
	15, // 47: blowpiperpc.Blowpipe.Pause:output_type -> blowpiperpc.PauseResponse
	17, // 48: blowpiperpc.Blowpipe.Resume:output_type -> blowpiperpc.ResumeResponse
	19, // 49: blowpiperpc.Blowpipe.Cancel:output_type -> blowpiperpc.CancelResponse
	32, // 50: blowpiperpc.Blowpipe.GetAllConfig:output_type -> blowpiperpc.GetConfigResponse
	32, // 51: blowpiperpc.Blowpipe.GetConfig:output_type -> blowpiperpc.GetConfigResponse
	34, // 52: blowpiperpc.Blowpipe.SetConfig:output_type -> blowpiperpc.SetConfigResponse
	29, // 53: blowpiperpc.Blowpipe.DeleteConfig:output_type -> blowpiperpc.DeleteConfigResponse
	31, // 54: blowpiperpc.Blowpipe.GetLog:output_type -> blowpiperpc.GetLogResponse
	42, // 55: blowpiperpc.Blowpipe.ManualTrigger:output_type -> blowpiperpc.ManualTriggerResponse
	37, // 56: blowpiperpc.Blowpipe.ListRunningWorkflows:output_type -> blowpiperpc.RunningWorkflow
	40, // 57: blowpiperpc.Blowpipe.GetRunningWorkflow:output_type -> blowpiperpc.GetRunningWorkflowResponse
	32, // [32:58] is the sub-list for method output_type
	6,  // [6:32] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_blowpiperpc_proto_init() }
func file_blowpiperpc_proto_init() {
	if File_blowpiperpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_blowpiperpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blowpiperpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Context); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blowpiperpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListContextsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blowpiperpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blowpiperpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddContextRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blowpiperpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddContextResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blowpiperpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteContextRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blowpiperpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteContextResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blowpiperpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWorkflowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blowpiperpc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWorkflowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blowpiperpc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddWorkflowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blowpiperpc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWorkflowsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blowpiperpc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWorkflowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blowpiperpc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blowpiperpc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PauseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blowpiperpc_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PauseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blowpiperpc_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blowpiperpc_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResumeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blowpiperpc_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blowpiperpc_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blowpiperpc_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetWorkflowEnabledRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blowpiperpc_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetWorkflowEnabledResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blowpiperpc_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWorkflowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blowpiperpc_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timestamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blowpiperpc_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blowpiperpc_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkflowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blowpiperpc_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkflowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blowpiperpc_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blowpiperpc_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blowpiperpc_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blowpiperpc_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blowpiperpc_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blowpiperpc_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blowpiperpc_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blowpiperpc_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blowpiperpc_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Workflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blowpiperpc_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blowpiperpc_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunningWorkflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blowpiperpc_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRunningWorkflowsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blowpiperpc_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRunningWorkflowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blowpiperpc_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRunningWorkflowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blowpiperpc_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManualTriggerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blowpiperpc_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManualTriggerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blowpiperpc_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blowpiperpc_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blowpiperpc_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blowpiperpc_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blowpiperpc_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blowpiperpc_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_blowpiperpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   49,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_blowpiperpc_proto_goTypes,
		DependencyIndexes: file_blowpiperpc_proto_depIdxs,
		MessageInfos:      file_blowpiperpc_proto_msgTypes,
	}.Build()
	File_blowpiperpc_proto = out.File
	file_blowpiperpc_proto_rawDesc = nil
	file_blowpiperpc_proto_goTypes = nil
	file_blowpiperpc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BlowpipeClient is the client API for Blowpipe service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BlowpipeClient interface {
	ListContexts(ctx context.Context, in *ListContextsRequest, opts ...grpc.CallOption) (Blowpipe_ListContextsClient, error)
	AddContext(ctx context.Context, in *AddContextRequest, opts ...grpc.CallOption) (Blowpipe_AddContextClient, error)
	DeleteContext(ctx context.Context, in *DeleteContextRequest, opts ...grpc.CallOption) (Blowpipe_DeleteContextClient, error)
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (Blowpipe_ListUsersClient, error)
	AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (Blowpipe_AddUserClient, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (Blowpipe_UpdateUserClient, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (Blowpipe_DeleteUserClient, error)
	ListWorkflows(ctx context.Context, in *ListWorkflowsRequest, opts ...grpc.CallOption) (Blowpipe_ListWorkflowsClient, error)
	ListWorkflowHistory(ctx context.Context, in *ID, opts ...grpc.CallOption) (Blowpipe_ListWorkflowHistoryClient, error)
	GetWorkflow(ctx context.Context, in *GetWorkflowRequest, opts ...grpc.CallOption) (*GetWorkflowResponse, error)
	AddWorkflow(ctx context.Context, in *Workflow, opts ...grpc.CallOption) (*AddWorkflowResponse, error)
	UpdateWorkflow(ctx context.Context, in *UpdateWorkflowRequest, opts ...grpc.CallOption) (*UpdateWorkflowResponse, error)
	DeleteWorkflow(ctx context.Context, in *DeleteWorkflowRequest, opts ...grpc.CallOption) (*DeleteWorkflowResponse, error)
	// https://github.com/grpc-ecosystem/grpc-gateway
	Status(ctx context.Context, in *Timestamp, opts ...grpc.CallOption) (*StatusResponse, error)
	SetWorkflowEnabled(ctx context.Context, in *SetWorkflowEnabledRequest, opts ...grpc.CallOption) (*SetWorkflowEnabledResponse, error)
	Pause(ctx context.Context, in *PauseRequest, opts ...grpc.CallOption) (*PauseResponse, error)
	Resume(ctx context.Context, in *ResumeRequest, opts ...grpc.CallOption) (*ResumeResponse, error)
	Cancel(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (*CancelResponse, error)
	GetAllConfig(ctx context.Context, in *Timestamp, opts ...grpc.CallOption) (Blowpipe_GetAllConfigClient, error)
	GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResponse, error)
	SetConfig(ctx context.Context, in *SetConfigRequest, opts ...grpc.CallOption) (*SetConfigResponse, error)
	DeleteConfig(ctx context.Context, in *DeleteConfigRequest, opts ...grpc.CallOption) (*DeleteConfigResponse, error)
	GetLog(ctx context.Context, in *GetLogRequest, opts ...grpc.CallOption) (Blowpipe_GetLogClient, error)
	ManualTrigger(ctx context.Context, in *ManualTriggerRequest, opts ...grpc.CallOption) (*ManualTriggerResponse, error)
	// returns only currently running Workflows
	ListRunningWorkflows(ctx context.Context, in *ListRunningWorkflowsRequest, opts ...grpc.CallOption) (Blowpipe_ListRunningWorkflowsClient, error)
	GetRunningWorkflow(ctx context.Context, in *GetRunningWorkflowRequest, opts ...grpc.CallOption) (*GetRunningWorkflowResponse, error)
}

type blowpipeClient struct {
	cc grpc.ClientConnInterface
}

func NewBlowpipeClient(cc grpc.ClientConnInterface) BlowpipeClient {
	return &blowpipeClient{cc}
}

func (c *blowpipeClient) ListContexts(ctx context.Context, in *ListContextsRequest, opts ...grpc.CallOption) (Blowpipe_ListContextsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Blowpipe_serviceDesc.Streams[0], "/blowpiperpc.Blowpipe/ListContexts", opts...)
	if err != nil {
		return nil, err
	}
	x := &blowpipeListContextsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Blowpipe_ListContextsClient interface {
	Recv() (*Context, error)
	grpc.ClientStream
}

type blowpipeListContextsClient struct {
	grpc.ClientStream
}

func (x *blowpipeListContextsClient) Recv() (*Context, error) {
	m := new(Context)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blowpipeClient) AddContext(ctx context.Context, in *AddContextRequest, opts ...grpc.CallOption) (Blowpipe_AddContextClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Blowpipe_serviceDesc.Streams[1], "/blowpiperpc.Blowpipe/AddContext", opts...)
	if err != nil {
		return nil, err
	}
	x := &blowpipeAddContextClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Blowpipe_AddContextClient interface {
	Recv() (*AddContextResponse, error)
	grpc.ClientStream
}

type blowpipeAddContextClient struct {
	grpc.ClientStream
}

func (x *blowpipeAddContextClient) Recv() (*AddContextResponse, error) {
	m := new(AddContextResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blowpipeClient) DeleteContext(ctx context.Context, in *DeleteContextRequest, opts ...grpc.CallOption) (Blowpipe_DeleteContextClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Blowpipe_serviceDesc.Streams[2], "/blowpiperpc.Blowpipe/DeleteContext", opts...)
	if err != nil {
		return nil, err
	}
	x := &blowpipeDeleteContextClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Blowpipe_DeleteContextClient interface {
	Recv() (*DeleteContextResponse, error)
	grpc.ClientStream
}

type blowpipeDeleteContextClient struct {
	grpc.ClientStream
}

func (x *blowpipeDeleteContextClient) Recv() (*DeleteContextResponse, error) {
	m := new(DeleteContextResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blowpipeClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (Blowpipe_ListUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Blowpipe_serviceDesc.Streams[3], "/blowpiperpc.Blowpipe/ListUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &blowpipeListUsersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Blowpipe_ListUsersClient interface {
	Recv() (*User, error)
	grpc.ClientStream
}

type blowpipeListUsersClient struct {
	grpc.ClientStream
}

func (x *blowpipeListUsersClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blowpipeClient) AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (Blowpipe_AddUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Blowpipe_serviceDesc.Streams[4], "/blowpiperpc.Blowpipe/AddUser", opts...)
	if err != nil {
		return nil, err
	}
	x := &blowpipeAddUserClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Blowpipe_AddUserClient interface {
	Recv() (*AddUserResponse, error)
	grpc.ClientStream
}

type blowpipeAddUserClient struct {
	grpc.ClientStream
}

func (x *blowpipeAddUserClient) Recv() (*AddUserResponse, error) {
	m := new(AddUserResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blowpipeClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (Blowpipe_UpdateUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Blowpipe_serviceDesc.Streams[5], "/blowpiperpc.Blowpipe/UpdateUser", opts...)
	if err != nil {
		return nil, err
	}
	x := &blowpipeUpdateUserClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Blowpipe_UpdateUserClient interface {
	Recv() (*UpdateUserResponse, error)
	grpc.ClientStream
}

type blowpipeUpdateUserClient struct {
	grpc.ClientStream
}

func (x *blowpipeUpdateUserClient) Recv() (*UpdateUserResponse, error) {
	m := new(UpdateUserResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blowpipeClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (Blowpipe_DeleteUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Blowpipe_serviceDesc.Streams[6], "/blowpiperpc.Blowpipe/DeleteUser", opts...)
	if err != nil {
		return nil, err
	}
	x := &blowpipeDeleteUserClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Blowpipe_DeleteUserClient interface {
	Recv() (*DeleteUserResponse, error)
	grpc.ClientStream
}

type blowpipeDeleteUserClient struct {
	grpc.ClientStream
}

func (x *blowpipeDeleteUserClient) Recv() (*DeleteUserResponse, error) {
	m := new(DeleteUserResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blowpipeClient) ListWorkflows(ctx context.Context, in *ListWorkflowsRequest, opts ...grpc.CallOption) (Blowpipe_ListWorkflowsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Blowpipe_serviceDesc.Streams[7], "/blowpiperpc.Blowpipe/ListWorkflows", opts...)
	if err != nil {
		return nil, err
	}
	x := &blowpipeListWorkflowsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Blowpipe_ListWorkflowsClient interface {
	Recv() (*Workflow, error)
	grpc.ClientStream
}

type blowpipeListWorkflowsClient struct {
	grpc.ClientStream
}

func (x *blowpipeListWorkflowsClient) Recv() (*Workflow, error) {
	m := new(Workflow)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blowpipeClient) ListWorkflowHistory(ctx context.Context, in *ID, opts ...grpc.CallOption) (Blowpipe_ListWorkflowHistoryClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Blowpipe_serviceDesc.Streams[8], "/blowpiperpc.Blowpipe/ListWorkflowHistory", opts...)
	if err != nil {
		return nil, err
	}
	x := &blowpipeListWorkflowHistoryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Blowpipe_ListWorkflowHistoryClient interface {
	Recv() (*WorkflowHistory, error)
	grpc.ClientStream
}

type blowpipeListWorkflowHistoryClient struct {
	grpc.ClientStream
}

func (x *blowpipeListWorkflowHistoryClient) Recv() (*WorkflowHistory, error) {
	m := new(WorkflowHistory)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blowpipeClient) GetWorkflow(ctx context.Context, in *GetWorkflowRequest, opts ...grpc.CallOption) (*GetWorkflowResponse, error) {
	out := new(GetWorkflowResponse)
	err := c.cc.Invoke(ctx, "/blowpiperpc.Blowpipe/GetWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blowpipeClient) AddWorkflow(ctx context.Context, in *Workflow, opts ...grpc.CallOption) (*AddWorkflowResponse, error) {
	out := new(AddWorkflowResponse)
	err := c.cc.Invoke(ctx, "/blowpiperpc.Blowpipe/AddWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blowpipeClient) UpdateWorkflow(ctx context.Context, in *UpdateWorkflowRequest, opts ...grpc.CallOption) (*UpdateWorkflowResponse, error) {
	out := new(UpdateWorkflowResponse)
	err := c.cc.Invoke(ctx, "/blowpiperpc.Blowpipe/UpdateWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blowpipeClient) DeleteWorkflow(ctx context.Context, in *DeleteWorkflowRequest, opts ...grpc.CallOption) (*DeleteWorkflowResponse, error) {
	out := new(DeleteWorkflowResponse)
	err := c.cc.Invoke(ctx, "/blowpiperpc.Blowpipe/DeleteWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blowpipeClient) Status(ctx context.Context, in *Timestamp, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/blowpiperpc.Blowpipe/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blowpipeClient) SetWorkflowEnabled(ctx context.Context, in *SetWorkflowEnabledRequest, opts ...grpc.CallOption) (*SetWorkflowEnabledResponse, error) {
	out := new(SetWorkflowEnabledResponse)
	err := c.cc.Invoke(ctx, "/blowpiperpc.Blowpipe/SetWorkflowEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blowpipeClient) Pause(ctx context.Context, in *PauseRequest, opts ...grpc.CallOption) (*PauseResponse, error) {
	out := new(PauseResponse)
	err := c.cc.Invoke(ctx, "/blowpiperpc.Blowpipe/Pause", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blowpipeClient) Resume(ctx context.Context, in *ResumeRequest, opts ...grpc.CallOption) (*ResumeResponse, error) {
	out := new(ResumeResponse)
	err := c.cc.Invoke(ctx, "/blowpiperpc.Blowpipe/Resume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blowpipeClient) Cancel(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (*CancelResponse, error) {
	out := new(CancelResponse)
	err := c.cc.Invoke(ctx, "/blowpiperpc.Blowpipe/Cancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blowpipeClient) GetAllConfig(ctx context.Context, in *Timestamp, opts ...grpc.CallOption) (Blowpipe_GetAllConfigClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Blowpipe_serviceDesc.Streams[9], "/blowpiperpc.Blowpipe/GetAllConfig", opts...)
	if err != nil {
		return nil, err
	}
	x := &blowpipeGetAllConfigClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Blowpipe_GetAllConfigClient interface {
	Recv() (*GetConfigResponse, error)
	grpc.ClientStream
}

type blowpipeGetAllConfigClient struct {
	grpc.ClientStream
}

func (x *blowpipeGetAllConfigClient) Recv() (*GetConfigResponse, error) {
	m := new(GetConfigResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blowpipeClient) GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResponse, error) {
	out := new(GetConfigResponse)
	err := c.cc.Invoke(ctx, "/blowpiperpc.Blowpipe/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blowpipeClient) SetConfig(ctx context.Context, in *SetConfigRequest, opts ...grpc.CallOption) (*SetConfigResponse, error) {
	out := new(SetConfigResponse)
	err := c.cc.Invoke(ctx, "/blowpiperpc.Blowpipe/SetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blowpipeClient) DeleteConfig(ctx context.Context, in *DeleteConfigRequest, opts ...grpc.CallOption) (*DeleteConfigResponse, error) {
	out := new(DeleteConfigResponse)
	err := c.cc.Invoke(ctx, "/blowpiperpc.Blowpipe/DeleteConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blowpipeClient) GetLog(ctx context.Context, in *GetLogRequest, opts ...grpc.CallOption) (Blowpipe_GetLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Blowpipe_serviceDesc.Streams[10], "/blowpiperpc.Blowpipe/GetLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &blowpipeGetLogClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Blowpipe_GetLogClient interface {
	Recv() (*GetLogResponse, error)
	grpc.ClientStream
}

type blowpipeGetLogClient struct {
	grpc.ClientStream
}

func (x *blowpipeGetLogClient) Recv() (*GetLogResponse, error) {
	m := new(GetLogResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blowpipeClient) ManualTrigger(ctx context.Context, in *ManualTriggerRequest, opts ...grpc.CallOption) (*ManualTriggerResponse, error) {
	out := new(ManualTriggerResponse)
	err := c.cc.Invoke(ctx, "/blowpiperpc.Blowpipe/ManualTrigger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blowpipeClient) ListRunningWorkflows(ctx context.Context, in *ListRunningWorkflowsRequest, opts ...grpc.CallOption) (Blowpipe_ListRunningWorkflowsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Blowpipe_serviceDesc.Streams[11], "/blowpiperpc.Blowpipe/ListRunningWorkflows", opts...)
	if err != nil {
		return nil, err
	}
	x := &blowpipeListRunningWorkflowsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Blowpipe_ListRunningWorkflowsClient interface {
	Recv() (*RunningWorkflow, error)
	grpc.ClientStream
}

type blowpipeListRunningWorkflowsClient struct {
	grpc.ClientStream
}

func (x *blowpipeListRunningWorkflowsClient) Recv() (*RunningWorkflow, error) {
	m := new(RunningWorkflow)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blowpipeClient) GetRunningWorkflow(ctx context.Context, in *GetRunningWorkflowRequest, opts ...grpc.CallOption) (*GetRunningWorkflowResponse, error) {
	out := new(GetRunningWorkflowResponse)
	err := c.cc.Invoke(ctx, "/blowpiperpc.Blowpipe/GetRunningWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlowpipeServer is the server API for Blowpipe service.
type BlowpipeServer interface {
	ListContexts(*ListContextsRequest, Blowpipe_ListContextsServer) error
	AddContext(*AddContextRequest, Blowpipe_AddContextServer) error
	DeleteContext(*DeleteContextRequest, Blowpipe_DeleteContextServer) error
	ListUsers(*ListUsersRequest, Blowpipe_ListUsersServer) error
	AddUser(*AddUserRequest, Blowpipe_AddUserServer) error
	UpdateUser(*UpdateUserRequest, Blowpipe_UpdateUserServer) error
	DeleteUser(*DeleteUserRequest, Blowpipe_DeleteUserServer) error
	ListWorkflows(*ListWorkflowsRequest, Blowpipe_ListWorkflowsServer) error
	ListWorkflowHistory(*ID, Blowpipe_ListWorkflowHistoryServer) error
	GetWorkflow(context.Context, *GetWorkflowRequest) (*GetWorkflowResponse, error)
	AddWorkflow(context.Context, *Workflow) (*AddWorkflowResponse, error)
	UpdateWorkflow(context.Context, *UpdateWorkflowRequest) (*UpdateWorkflowResponse, error)
	DeleteWorkflow(context.Context, *DeleteWorkflowRequest) (*DeleteWorkflowResponse, error)
	// https://github.com/grpc-ecosystem/grpc-gateway
	Status(context.Context, *Timestamp) (*StatusResponse, error)
	SetWorkflowEnabled(context.Context, *SetWorkflowEnabledRequest) (*SetWorkflowEnabledResponse, error)
	Pause(context.Context, *PauseRequest) (*PauseResponse, error)
	Resume(context.Context, *ResumeRequest) (*ResumeResponse, error)
	Cancel(context.Context, *CancelRequest) (*CancelResponse, error)
	GetAllConfig(*Timestamp, Blowpipe_GetAllConfigServer) error
	GetConfig(context.Context, *GetConfigRequest) (*GetConfigResponse, error)
	SetConfig(context.Context, *SetConfigRequest) (*SetConfigResponse, error)
	DeleteConfig(context.Context, *DeleteConfigRequest) (*DeleteConfigResponse, error)
	GetLog(*GetLogRequest, Blowpipe_GetLogServer) error
	ManualTrigger(context.Context, *ManualTriggerRequest) (*ManualTriggerResponse, error)
	// returns only currently running Workflows
	ListRunningWorkflows(*ListRunningWorkflowsRequest, Blowpipe_ListRunningWorkflowsServer) error
	GetRunningWorkflow(context.Context, *GetRunningWorkflowRequest) (*GetRunningWorkflowResponse, error)
}

// UnimplementedBlowpipeServer can be embedded to have forward compatible implementations.
type UnimplementedBlowpipeServer struct {
}

func (*UnimplementedBlowpipeServer) ListContexts(*ListContextsRequest, Blowpipe_ListContextsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListContexts not implemented")
}
func (*UnimplementedBlowpipeServer) AddContext(*AddContextRequest, Blowpipe_AddContextServer) error {
	return status.Errorf(codes.Unimplemented, "method AddContext not implemented")
}
func (*UnimplementedBlowpipeServer) DeleteContext(*DeleteContextRequest, Blowpipe_DeleteContextServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteContext not implemented")
}
func (*UnimplementedBlowpipeServer) ListUsers(*ListUsersRequest, Blowpipe_ListUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (*UnimplementedBlowpipeServer) AddUser(*AddUserRequest, Blowpipe_AddUserServer) error {
	return status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (*UnimplementedBlowpipeServer) UpdateUser(*UpdateUserRequest, Blowpipe_UpdateUserServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (*UnimplementedBlowpipeServer) DeleteUser(*DeleteUserRequest, Blowpipe_DeleteUserServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (*UnimplementedBlowpipeServer) ListWorkflows(*ListWorkflowsRequest, Blowpipe_ListWorkflowsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListWorkflows not implemented")
}
func (*UnimplementedBlowpipeServer) ListWorkflowHistory(*ID, Blowpipe_ListWorkflowHistoryServer) error {
	return status.Errorf(codes.Unimplemented, "method ListWorkflowHistory not implemented")
}
func (*UnimplementedBlowpipeServer) GetWorkflow(context.Context, *GetWorkflowRequest) (*GetWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflow not implemented")
}
func (*UnimplementedBlowpipeServer) AddWorkflow(context.Context, *Workflow) (*AddWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWorkflow not implemented")
}
func (*UnimplementedBlowpipeServer) UpdateWorkflow(context.Context, *UpdateWorkflowRequest) (*UpdateWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkflow not implemented")
}
func (*UnimplementedBlowpipeServer) DeleteWorkflow(context.Context, *DeleteWorkflowRequest) (*DeleteWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkflow not implemented")
}
func (*UnimplementedBlowpipeServer) Status(context.Context, *Timestamp) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (*UnimplementedBlowpipeServer) SetWorkflowEnabled(context.Context, *SetWorkflowEnabledRequest) (*SetWorkflowEnabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetWorkflowEnabled not implemented")
}
func (*UnimplementedBlowpipeServer) Pause(context.Context, *PauseRequest) (*PauseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pause not implemented")
}
func (*UnimplementedBlowpipeServer) Resume(context.Context, *ResumeRequest) (*ResumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Resume not implemented")
}
func (*UnimplementedBlowpipeServer) Cancel(context.Context, *CancelRequest) (*CancelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (*UnimplementedBlowpipeServer) GetAllConfig(*Timestamp, Blowpipe_GetAllConfigServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllConfig not implemented")
}
func (*UnimplementedBlowpipeServer) GetConfig(context.Context, *GetConfigRequest) (*GetConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (*UnimplementedBlowpipeServer) SetConfig(context.Context, *SetConfigRequest) (*SetConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfig not implemented")
}
func (*UnimplementedBlowpipeServer) DeleteConfig(context.Context, *DeleteConfigRequest) (*DeleteConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConfig not implemented")
}
func (*UnimplementedBlowpipeServer) GetLog(*GetLogRequest, Blowpipe_GetLogServer) error {
	return status.Errorf(codes.Unimplemented, "method GetLog not implemented")
}
func (*UnimplementedBlowpipeServer) ManualTrigger(context.Context, *ManualTriggerRequest) (*ManualTriggerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManualTrigger not implemented")
}
func (*UnimplementedBlowpipeServer) ListRunningWorkflows(*ListRunningWorkflowsRequest, Blowpipe_ListRunningWorkflowsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListRunningWorkflows not implemented")
}
func (*UnimplementedBlowpipeServer) GetRunningWorkflow(context.Context, *GetRunningWorkflowRequest) (*GetRunningWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunningWorkflow not implemented")
}

func RegisterBlowpipeServer(s *grpc.Server, srv BlowpipeServer) {
	s.RegisterService(&_Blowpipe_serviceDesc, srv)
}

func _Blowpipe_ListContexts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListContextsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlowpipeServer).ListContexts(m, &blowpipeListContextsServer{stream})
}

type Blowpipe_ListContextsServer interface {
	Send(*Context) error
	grpc.ServerStream
}

type blowpipeListContextsServer struct {
	grpc.ServerStream
}

func (x *blowpipeListContextsServer) Send(m *Context) error {
	return x.ServerStream.SendMsg(m)
}

func _Blowpipe_AddContext_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AddContextRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlowpipeServer).AddContext(m, &blowpipeAddContextServer{stream})
}

type Blowpipe_AddContextServer interface {
	Send(*AddContextResponse) error
	grpc.ServerStream
}

type blowpipeAddContextServer struct {
	grpc.ServerStream
}

func (x *blowpipeAddContextServer) Send(m *AddContextResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Blowpipe_DeleteContext_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeleteContextRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlowpipeServer).DeleteContext(m, &blowpipeDeleteContextServer{stream})
}

type Blowpipe_DeleteContextServer interface {
	Send(*DeleteContextResponse) error
	grpc.ServerStream
}

type blowpipeDeleteContextServer struct {
	grpc.ServerStream
}

func (x *blowpipeDeleteContextServer) Send(m *DeleteContextResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Blowpipe_ListUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListUsersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlowpipeServer).ListUsers(m, &blowpipeListUsersServer{stream})
}

type Blowpipe_ListUsersServer interface {
	Send(*User) error
	grpc.ServerStream
}

type blowpipeListUsersServer struct {
	grpc.ServerStream
}

func (x *blowpipeListUsersServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

func _Blowpipe_AddUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AddUserRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlowpipeServer).AddUser(m, &blowpipeAddUserServer{stream})
}

type Blowpipe_AddUserServer interface {
	Send(*AddUserResponse) error
	grpc.ServerStream
}

type blowpipeAddUserServer struct {
	grpc.ServerStream
}

func (x *blowpipeAddUserServer) Send(m *AddUserResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Blowpipe_UpdateUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UpdateUserRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlowpipeServer).UpdateUser(m, &blowpipeUpdateUserServer{stream})
}

type Blowpipe_UpdateUserServer interface {
	Send(*UpdateUserResponse) error
	grpc.ServerStream
}

type blowpipeUpdateUserServer struct {
	grpc.ServerStream
}

func (x *blowpipeUpdateUserServer) Send(m *UpdateUserResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Blowpipe_DeleteUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeleteUserRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlowpipeServer).DeleteUser(m, &blowpipeDeleteUserServer{stream})
}

type Blowpipe_DeleteUserServer interface {
	Send(*DeleteUserResponse) error
	grpc.ServerStream
}

type blowpipeDeleteUserServer struct {
	grpc.ServerStream
}

func (x *blowpipeDeleteUserServer) Send(m *DeleteUserResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Blowpipe_ListWorkflows_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListWorkflowsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlowpipeServer).ListWorkflows(m, &blowpipeListWorkflowsServer{stream})
}

type Blowpipe_ListWorkflowsServer interface {
	Send(*Workflow) error
	grpc.ServerStream
}

type blowpipeListWorkflowsServer struct {
	grpc.ServerStream
}

func (x *blowpipeListWorkflowsServer) Send(m *Workflow) error {
	return x.ServerStream.SendMsg(m)
}

func _Blowpipe_ListWorkflowHistory_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlowpipeServer).ListWorkflowHistory(m, &blowpipeListWorkflowHistoryServer{stream})
}

type Blowpipe_ListWorkflowHistoryServer interface {
	Send(*WorkflowHistory) error
	grpc.ServerStream
}

type blowpipeListWorkflowHistoryServer struct {
	grpc.ServerStream
}

func (x *blowpipeListWorkflowHistoryServer) Send(m *WorkflowHistory) error {
	return x.ServerStream.SendMsg(m)
}

func _Blowpipe_GetWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlowpipeServer).GetWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blowpiperpc.Blowpipe/GetWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlowpipeServer).GetWorkflow(ctx, req.(*GetWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blowpipe_AddWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Workflow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlowpipeServer).AddWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blowpiperpc.Blowpipe/AddWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlowpipeServer).AddWorkflow(ctx, req.(*Workflow))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blowpipe_UpdateWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlowpipeServer).UpdateWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blowpiperpc.Blowpipe/UpdateWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlowpipeServer).UpdateWorkflow(ctx, req.(*UpdateWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blowpipe_DeleteWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlowpipeServer).DeleteWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blowpiperpc.Blowpipe/DeleteWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlowpipeServer).DeleteWorkflow(ctx, req.(*DeleteWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blowpipe_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Timestamp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlowpipeServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blowpiperpc.Blowpipe/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlowpipeServer).Status(ctx, req.(*Timestamp))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blowpipe_SetWorkflowEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetWorkflowEnabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlowpipeServer).SetWorkflowEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blowpiperpc.Blowpipe/SetWorkflowEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlowpipeServer).SetWorkflowEnabled(ctx, req.(*SetWorkflowEnabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blowpipe_Pause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlowpipeServer).Pause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blowpiperpc.Blowpipe/Pause",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlowpipeServer).Pause(ctx, req.(*PauseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blowpipe_Resume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlowpipeServer).Resume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blowpiperpc.Blowpipe/Resume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlowpipeServer).Resume(ctx, req.(*ResumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blowpipe_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlowpipeServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blowpiperpc.Blowpipe/Cancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlowpipeServer).Cancel(ctx, req.(*CancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blowpipe_GetAllConfig_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Timestamp)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlowpipeServer).GetAllConfig(m, &blowpipeGetAllConfigServer{stream})
}

type Blowpipe_GetAllConfigServer interface {
	Send(*GetConfigResponse) error
	grpc.ServerStream
}

type blowpipeGetAllConfigServer struct {
	grpc.ServerStream
}

func (x *blowpipeGetAllConfigServer) Send(m *GetConfigResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Blowpipe_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlowpipeServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blowpiperpc.Blowpipe/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlowpipeServer).GetConfig(ctx, req.(*GetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blowpipe_SetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlowpipeServer).SetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blowpiperpc.Blowpipe/SetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlowpipeServer).SetConfig(ctx, req.(*SetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blowpipe_DeleteConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlowpipeServer).DeleteConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blowpiperpc.Blowpipe/DeleteConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlowpipeServer).DeleteConfig(ctx, req.(*DeleteConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blowpipe_GetLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetLogRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlowpipeServer).GetLog(m, &blowpipeGetLogServer{stream})
}

type Blowpipe_GetLogServer interface {
	Send(*GetLogResponse) error
	grpc.ServerStream
}

type blowpipeGetLogServer struct {
	grpc.ServerStream
}

func (x *blowpipeGetLogServer) Send(m *GetLogResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Blowpipe_ManualTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManualTriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlowpipeServer).ManualTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blowpiperpc.Blowpipe/ManualTrigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlowpipeServer).ManualTrigger(ctx, req.(*ManualTriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blowpipe_ListRunningWorkflows_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRunningWorkflowsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlowpipeServer).ListRunningWorkflows(m, &blowpipeListRunningWorkflowsServer{stream})
}

type Blowpipe_ListRunningWorkflowsServer interface {
	Send(*RunningWorkflow) error
	grpc.ServerStream
}

type blowpipeListRunningWorkflowsServer struct {
	grpc.ServerStream
}

func (x *blowpipeListRunningWorkflowsServer) Send(m *RunningWorkflow) error {
	return x.ServerStream.SendMsg(m)
}

func _Blowpipe_GetRunningWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRunningWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlowpipeServer).GetRunningWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blowpiperpc.Blowpipe/GetRunningWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlowpipeServer).GetRunningWorkflow(ctx, req.(*GetRunningWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Blowpipe_serviceDesc = grpc.ServiceDesc{
	ServiceName: "blowpiperpc.Blowpipe",
	HandlerType: (*BlowpipeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWorkflow",
			Handler:    _Blowpipe_GetWorkflow_Handler,
		},
		{
			MethodName: "AddWorkflow",
			Handler:    _Blowpipe_AddWorkflow_Handler,
		},
		{
			MethodName: "UpdateWorkflow",
			Handler:    _Blowpipe_UpdateWorkflow_Handler,
		},
		{
			MethodName: "DeleteWorkflow",
			Handler:    _Blowpipe_DeleteWorkflow_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Blowpipe_Status_Handler,
		},
		{
			MethodName: "SetWorkflowEnabled",
			Handler:    _Blowpipe_SetWorkflowEnabled_Handler,
		},
		{
			MethodName: "Pause",
			Handler:    _Blowpipe_Pause_Handler,
		},
		{
			MethodName: "Resume",
			Handler:    _Blowpipe_Resume_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _Blowpipe_Cancel_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _Blowpipe_GetConfig_Handler,
		},
		{
			MethodName: "SetConfig",
			Handler:    _Blowpipe_SetConfig_Handler,
		},
		{
			MethodName: "DeleteConfig",
			Handler:    _Blowpipe_DeleteConfig_Handler,
		},
		{
			MethodName: "ManualTrigger",
			Handler:    _Blowpipe_ManualTrigger_Handler,
		},
		{
			MethodName: "GetRunningWorkflow",
			Handler:    _Blowpipe_GetRunningWorkflow_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListContexts",
			Handler:       _Blowpipe_ListContexts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AddContext",
			Handler:       _Blowpipe_AddContext_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteContext",
			Handler:       _Blowpipe_DeleteContext_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListUsers",
			Handler:       _Blowpipe_ListUsers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AddUser",
			Handler:       _Blowpipe_AddUser_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UpdateUser",
			Handler:       _Blowpipe_UpdateUser_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteUser",
			Handler:       _Blowpipe_DeleteUser_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListWorkflows",
			Handler:       _Blowpipe_ListWorkflows_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListWorkflowHistory",
			Handler:       _Blowpipe_ListWorkflowHistory_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllConfig",
			Handler:       _Blowpipe_GetAllConfig_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetLog",
			Handler:       _Blowpipe_GetLog_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListRunningWorkflows",
			Handler:       _Blowpipe_ListRunningWorkflows_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "blowpiperpc.proto",
}
